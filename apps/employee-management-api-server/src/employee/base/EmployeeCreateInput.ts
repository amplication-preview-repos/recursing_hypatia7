/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { PresenceCreateNestedManyWithoutEmployeesInput } from "./PresenceCreateNestedManyWithoutEmployeesInput";
import { Type } from "class-transformer";
import { TransferCreateNestedManyWithoutEmployeesInput } from "./TransferCreateNestedManyWithoutEmployeesInput";
import { HolidayCreateNestedManyWithoutEmployeesInput } from "./HolidayCreateNestedManyWithoutEmployeesInput";
import { PermissionCreateNestedManyWithoutEmployeesInput } from "./PermissionCreateNestedManyWithoutEmployeesInput";
import { DiseaseCertificateCreateNestedManyWithoutEmployeesInput } from "./DiseaseCertificateCreateNestedManyWithoutEmployeesInput";

@InputType()
class EmployeeCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: () => PresenceCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => PresenceCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => PresenceCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  presences?: PresenceCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TransferCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TransferCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TransferCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  transfers?: TransferCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => HolidayCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => HolidayCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => HolidayCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  holidays?: HolidayCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => PermissionCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => PermissionCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => PermissionCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  permissions?: PermissionCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => DiseaseCertificateCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => DiseaseCertificateCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => DiseaseCertificateCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  diseaseCertificates?: DiseaseCertificateCreateNestedManyWithoutEmployeesInput;
}

export { EmployeeCreateInput as EmployeeCreateInput };
