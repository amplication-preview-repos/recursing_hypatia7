/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Presence as PrismaPresence,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class PresenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PresenceCountArgs, "select">): Promise<number> {
    return this.prisma.presence.count(args);
  }

  async presences(
    args: Prisma.PresenceFindManyArgs
  ): Promise<PrismaPresence[]> {
    return this.prisma.presence.findMany(args);
  }
  async presence(
    args: Prisma.PresenceFindUniqueArgs
  ): Promise<PrismaPresence | null> {
    return this.prisma.presence.findUnique(args);
  }
  async createPresence(
    args: Prisma.PresenceCreateArgs
  ): Promise<PrismaPresence> {
    return this.prisma.presence.create(args);
  }
  async updatePresence(
    args: Prisma.PresenceUpdateArgs
  ): Promise<PrismaPresence> {
    return this.prisma.presence.update(args);
  }
  async deletePresence(
    args: Prisma.PresenceDeleteArgs
  ): Promise<PrismaPresence> {
    return this.prisma.presence.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.presence
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
