/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  MaxLength,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { Presence } from "../../presence/base/Presence";
import { Transfer } from "../../transfer/base/Transfer";
import { Holiday } from "../../holiday/base/Holiday";
import { Permission } from "../../permission/base/Permission";
import { DiseaseCertificate } from "../../diseaseCertificate/base/DiseaseCertificate";

@ObjectType()
class Employee {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Presence],
  })
  @ValidateNested()
  @Type(() => Presence)
  @IsOptional()
  presences?: Array<Presence>;

  @ApiProperty({
    required: false,
    type: () => [Transfer],
  })
  @ValidateNested()
  @Type(() => Transfer)
  @IsOptional()
  transfers?: Array<Transfer>;

  @ApiProperty({
    required: false,
    type: () => [Holiday],
  })
  @ValidateNested()
  @Type(() => Holiday)
  @IsOptional()
  holidays?: Array<Holiday>;

  @ApiProperty({
    required: false,
    type: () => [Permission],
  })
  @ValidateNested()
  @Type(() => Permission)
  @IsOptional()
  permissions?: Array<Permission>;

  @ApiProperty({
    required: false,
    type: () => [DiseaseCertificate],
  })
  @ValidateNested()
  @Type(() => DiseaseCertificate)
  @IsOptional()
  diseaseCertificates?: Array<DiseaseCertificate>;
}

export { Employee as Employee };
