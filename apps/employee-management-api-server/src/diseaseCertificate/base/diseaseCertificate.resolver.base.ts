/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DiseaseCertificate } from "./DiseaseCertificate";
import { DiseaseCertificateCountArgs } from "./DiseaseCertificateCountArgs";
import { DiseaseCertificateFindManyArgs } from "./DiseaseCertificateFindManyArgs";
import { DiseaseCertificateFindUniqueArgs } from "./DiseaseCertificateFindUniqueArgs";
import { CreateDiseaseCertificateArgs } from "./CreateDiseaseCertificateArgs";
import { UpdateDiseaseCertificateArgs } from "./UpdateDiseaseCertificateArgs";
import { DeleteDiseaseCertificateArgs } from "./DeleteDiseaseCertificateArgs";
import { Employee } from "../../employee/base/Employee";
import { DiseaseCertificateService } from "../diseaseCertificate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DiseaseCertificate)
export class DiseaseCertificateResolverBase {
  constructor(
    protected readonly service: DiseaseCertificateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DiseaseCertificate",
    action: "read",
    possession: "any",
  })
  async _diseaseCertificatesMeta(
    @graphql.Args() args: DiseaseCertificateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DiseaseCertificate])
  @nestAccessControl.UseRoles({
    resource: "DiseaseCertificate",
    action: "read",
    possession: "any",
  })
  async diseaseCertificates(
    @graphql.Args() args: DiseaseCertificateFindManyArgs
  ): Promise<DiseaseCertificate[]> {
    return this.service.diseaseCertificates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DiseaseCertificate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DiseaseCertificate",
    action: "read",
    possession: "own",
  })
  async diseaseCertificate(
    @graphql.Args() args: DiseaseCertificateFindUniqueArgs
  ): Promise<DiseaseCertificate | null> {
    const result = await this.service.diseaseCertificate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiseaseCertificate)
  @nestAccessControl.UseRoles({
    resource: "DiseaseCertificate",
    action: "create",
    possession: "any",
  })
  async createDiseaseCertificate(
    @graphql.Args() args: CreateDiseaseCertificateArgs
  ): Promise<DiseaseCertificate> {
    return await this.service.createDiseaseCertificate({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiseaseCertificate)
  @nestAccessControl.UseRoles({
    resource: "DiseaseCertificate",
    action: "update",
    possession: "any",
  })
  async updateDiseaseCertificate(
    @graphql.Args() args: UpdateDiseaseCertificateArgs
  ): Promise<DiseaseCertificate | null> {
    try {
      return await this.service.updateDiseaseCertificate({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiseaseCertificate)
  @nestAccessControl.UseRoles({
    resource: "DiseaseCertificate",
    action: "delete",
    possession: "any",
  })
  async deleteDiseaseCertificate(
    @graphql.Args() args: DeleteDiseaseCertificateArgs
  ): Promise<DiseaseCertificate | null> {
    try {
      return await this.service.deleteDiseaseCertificate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: DiseaseCertificate
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
