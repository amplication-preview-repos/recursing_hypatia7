/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Holiday } from "./Holiday";
import { HolidayCountArgs } from "./HolidayCountArgs";
import { HolidayFindManyArgs } from "./HolidayFindManyArgs";
import { HolidayFindUniqueArgs } from "./HolidayFindUniqueArgs";
import { CreateHolidayArgs } from "./CreateHolidayArgs";
import { UpdateHolidayArgs } from "./UpdateHolidayArgs";
import { DeleteHolidayArgs } from "./DeleteHolidayArgs";
import { Employee } from "../../employee/base/Employee";
import { HolidayService } from "../holiday.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Holiday)
export class HolidayResolverBase {
  constructor(
    protected readonly service: HolidayService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Holiday",
    action: "read",
    possession: "any",
  })
  async _holidaysMeta(
    @graphql.Args() args: HolidayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Holiday])
  @nestAccessControl.UseRoles({
    resource: "Holiday",
    action: "read",
    possession: "any",
  })
  async holidays(
    @graphql.Args() args: HolidayFindManyArgs
  ): Promise<Holiday[]> {
    return this.service.holidays(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Holiday, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Holiday",
    action: "read",
    possession: "own",
  })
  async holiday(
    @graphql.Args() args: HolidayFindUniqueArgs
  ): Promise<Holiday | null> {
    const result = await this.service.holiday(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Holiday)
  @nestAccessControl.UseRoles({
    resource: "Holiday",
    action: "create",
    possession: "any",
  })
  async createHoliday(
    @graphql.Args() args: CreateHolidayArgs
  ): Promise<Holiday> {
    return await this.service.createHoliday({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Holiday)
  @nestAccessControl.UseRoles({
    resource: "Holiday",
    action: "update",
    possession: "any",
  })
  async updateHoliday(
    @graphql.Args() args: UpdateHolidayArgs
  ): Promise<Holiday | null> {
    try {
      return await this.service.updateHoliday({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Holiday)
  @nestAccessControl.UseRoles({
    resource: "Holiday",
    action: "delete",
    possession: "any",
  })
  async deleteHoliday(
    @graphql.Args() args: DeleteHolidayArgs
  ): Promise<Holiday | null> {
    try {
      return await this.service.deleteHoliday(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: Holiday
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
