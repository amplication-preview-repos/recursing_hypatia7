/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Presence } from "./Presence";
import { PresenceCountArgs } from "./PresenceCountArgs";
import { PresenceFindManyArgs } from "./PresenceFindManyArgs";
import { PresenceFindUniqueArgs } from "./PresenceFindUniqueArgs";
import { CreatePresenceArgs } from "./CreatePresenceArgs";
import { UpdatePresenceArgs } from "./UpdatePresenceArgs";
import { DeletePresenceArgs } from "./DeletePresenceArgs";
import { Employee } from "../../employee/base/Employee";
import { PresenceService } from "../presence.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Presence)
export class PresenceResolverBase {
  constructor(
    protected readonly service: PresenceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Presence",
    action: "read",
    possession: "any",
  })
  async _presencesMeta(
    @graphql.Args() args: PresenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Presence])
  @nestAccessControl.UseRoles({
    resource: "Presence",
    action: "read",
    possession: "any",
  })
  async presences(
    @graphql.Args() args: PresenceFindManyArgs
  ): Promise<Presence[]> {
    return this.service.presences(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Presence, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Presence",
    action: "read",
    possession: "own",
  })
  async presence(
    @graphql.Args() args: PresenceFindUniqueArgs
  ): Promise<Presence | null> {
    const result = await this.service.presence(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Presence)
  @nestAccessControl.UseRoles({
    resource: "Presence",
    action: "create",
    possession: "any",
  })
  async createPresence(
    @graphql.Args() args: CreatePresenceArgs
  ): Promise<Presence> {
    return await this.service.createPresence({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Presence)
  @nestAccessControl.UseRoles({
    resource: "Presence",
    action: "update",
    possession: "any",
  })
  async updatePresence(
    @graphql.Args() args: UpdatePresenceArgs
  ): Promise<Presence | null> {
    try {
      return await this.service.updatePresence({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Presence)
  @nestAccessControl.UseRoles({
    resource: "Presence",
    action: "delete",
    possession: "any",
  })
  async deletePresence(
    @graphql.Args() args: DeletePresenceArgs
  ): Promise<Presence | null> {
    try {
      return await this.service.deletePresence(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: Presence
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
